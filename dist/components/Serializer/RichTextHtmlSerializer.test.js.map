{"version":3,"sources":["../../../src/components/Serializer/RichTextHtmlSerializer.test.tsx"],"names":["React","RichText","CopyText","Heading","Link","Picture","mountWithTheme","getHeadline","getParagraph","getStrongParagraph","getEmParagraph","getUrlParagraph","getImage","ConfigurablePrismicHtmlSerializer","renderWrapper","richTextList","describe","it","wrapper","expect","find","toHaveLength","prop","toEqual","at","toBeTruthy","toBeFalsy"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { RichText } from 'prismic-reactjs'\nimport { CopyText, Heading, Link, Picture, mountWithTheme } from 'webmobile-sc-components'\nimport {\n  getHeadline,\n  getParagraph,\n  getStrongParagraph,\n  getEmParagraph,\n  getUrlParagraph,\n  getImage,\n} from './RichTextHtmlSerializer.mock'\n\nimport { ConfigurablePrismicHtmlSerializer } from './ConfigurablePrismicHtmlSerializer'\n\nconst renderWrapper = (richTextList = []) => {\n  return mountWithTheme(\n    <RichText render={richTextList} htmlSerializer={ConfigurablePrismicHtmlSerializer()} />\n  )\n}\n\ndescribe('RichText with Serializer', () => {\n  it('renders h1 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('1')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h1')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-1')\n  })\n\n  it('renders h2 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('2')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h2')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-2')\n  })\n\n  it('renders h3 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('3')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h3')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-3')\n  })\n\n  it('renders h4 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('4')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h4')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders h5 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('5')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h5')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders h6 element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getHeadline('6')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h6')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders p element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(1)\n  })\n\n  it('renders strong element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getStrongParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(2)\n    // Check outer paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(0)\n        .prop('withMargins')\n    ).toBeTruthy()\n    // Check inner strong paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('withMargins')\n    ).toBeFalsy()\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('tag')\n    ).toEqual('strong')\n  })\n\n  it('renders em element correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getEmParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(2)\n    // Check outer paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(0)\n        .prop('withMargins')\n    ).toBeTruthy()\n    // Check inner em paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('withMargins')\n    ).toBeFalsy()\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('tag')\n    ).toEqual('em')\n  })\n\n  it('renders urls correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getUrlParagraph()])\n    expect(wrapper.find(Link)).toHaveLength(1)\n    expect(wrapper.find(Link).prop('underline')).toBeTruthy()\n    expect(wrapper.find(Link).prop('href')).toEqual('https://mediamarkt.de')\n  })\n\n  it('renders images correctly', () => {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n    const wrapper = renderWrapper([getImage()])\n    expect(wrapper.find(Picture)).toHaveLength(1)\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('src')\n    ).toEqual(\n      'https://mms-test.cdn.prismic.io/mms-test/' +\n        'df94ace81ca3fe53fde90434b330541257cbc9c9_myaccount-retention-2018-deine-nacht-in-mm.jpg'\n    )\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('alt')\n    ).toEqual('altText')\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('width')\n    ).toEqual(1920)\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('height')\n    ).toEqual(1080)\n  })\n})\n"],"file":"RichTextHtmlSerializer.test.js"}