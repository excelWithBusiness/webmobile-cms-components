{"version":3,"sources":["../../../src/components/AppMeta/index.tsx"],"names":["React","Helmet","MAX_LENGTH_OG_DESCRIPTION","defaultFontList","defaultFontProps","as","rel","type","crossOrigin","getFontLink","name","AppMeta","title","description","generator","keywords","canonical","imageUrl","prev","next","fontList","preconnectLinkList","prefetchLinkList","additionalMetas","includeStoreInTitle","storeName","children","useConfig","locale","outlet","additionalMeta","map","meta","index","key","toString","isRobotsInAdditionalMeta","find","item","push","content","titleTemplate","property","slice","trim","links","href","font","link","lang","entry"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { AppMetaProps, AdditionalMeta } from './AppMeta.interface'\n\nconst MAX_LENGTH_OG_DESCRIPTION = 127\n\nconst defaultFontList = [\n  'SourceSansPro-Bold.woff2',\n  'SourceSansPro-Semibold.woff2',\n  'SourceSansPro-Regular.woff2',\n]\n\nconst defaultFontProps = {\n  as: 'font',\n  rel: 'preload',\n  type: 'font/woff2',\n  crossOrigin: 'anonymous',\n}\n\nconst getFontLink = (name: string) => `/build/assets/${name}`\n\nexport const AppMeta: React.FC<AppMetaProps> = ({\n  title = '',\n  description = '',\n  generator = 'webmobile-landing-pages',\n  keywords,\n  canonical = '',\n  imageUrl = '',\n  prev,\n  next,\n  type = 'webpage',\n  fontList = defaultFontList,\n  preconnectLinkList = [],\n  prefetchLinkList = [],\n  additionalMetas = [],\n  includeStoreInTitle = true,\n  storeName = '',\n  children,\n}) => {\n  const {\n    outlet: { locale },\n  } = useConfig()\n  const additionalMeta: AdditionalMeta[] = additionalMetas.map((meta, index) => ({\n    key: index.toString(),\n    ...meta,\n  }))\n  const isRobotsInAdditionalMeta = additionalMeta.find(item => item.name === 'robots')\n  !isRobotsInAdditionalMeta && additionalMeta.push({ name: 'robots', content: 'noindex,follow' })\n  const titleTemplate = includeStoreInTitle ? `%s | ${storeName}` : '%s'\n  const meta: AdditionalMeta[] = [\n    { name: 'description', content: description || '' },\n    { name: 'keywords', content: keywords || '' },\n    { name: 'generator', content: generator },\n    { property: 'og:title', content: title || '' },\n    {\n      property: 'og:description',\n      content: (description || '').slice(0, MAX_LENGTH_OG_DESCRIPTION).trim(),\n    },\n    { property: 'og:type', content: type },\n    { property: 'og:image', content: imageUrl },\n    { property: 'og:site_name', content: storeName },\n    { property: 'og:url', content: canonical },\n    ...additionalMeta,\n  ]\n\n  const links = [\n    ...(canonical ? [{ rel: 'canonical', href: canonical }] : []),\n    ...(prev ? [{ rel: 'prev', href: prev }] : []),\n    ...(next ? [{ rel: 'next', href: next }] : []),\n    ...fontList.map(font => ({ ...defaultFontProps, href: getFontLink(font) })),\n    ...preconnectLinkList.map(link => ({ rel: 'preconnect', href: link })),\n    ...prefetchLinkList.map(link => ({ rel: 'preconnect dns-prefetch', href: link })),\n  ]\n\n  return (\n    <Helmet\n      titleTemplate={titleTemplate}\n      defaultTitle={title || ''}\n      htmlAttributes={{ lang: locale }}>\n      {meta.map((entry, index) => {\n        return <meta key={index} {...entry} />\n      })}\n      {links.map((entry, index) => {\n        return <link key={index} {...entry} />\n      })}\n      <title>{title}</title>\n      {children}\n    </Helmet>\n  )\n}\n"],"file":"index.js"}