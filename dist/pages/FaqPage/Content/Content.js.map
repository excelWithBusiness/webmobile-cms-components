{"version":3,"sources":["../../../../src/pages/FaqPage/Content/Content.tsx"],"names":["React","Cell","Grid","Offset","Row","Section","Spacer","Accordion","prepareEntries","pageComponents","entries","map","title","description","details","e","i","isOpenInitially","noBorderTop","Content","slices","Array","isArray","length","slice","index","keyProp","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,MAHF,EAIEC,GAJF,EAKEC,OALF,EAMEC,MANF,EAOEC,SAPF,QAQO,4CARP;AAWA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAEC,cAAF,QAAEA,cAAF;AAAA,SAAsBA,cAAc,CAACC,OAAf,CACjDC,GADiD,CAC7C;AAAA,QAAEC,KAAF,SAAEA,KAAF;AAAA,QAASC,WAAT,SAASA,WAAT;AAAA,WAA2B;AAC9BD,MAAAA,KAAK,EAALA,KAD8B;AAE9BE,MAAAA,OAAO,EAAED;AAFqB,KAA3B;AAAA,GAD6C,EAKjDF,GALiD,CAK7C,UAACI,CAAD,EAAIC,CAAJ;AAAA,WACHA,CAAC,KAAK,CAAN,mCAEOD,CAFP;AAGIE,MAAAA,eAAe,EAAE,IAHrB;AAIIC,MAAAA,WAAW,EAAE;AAJjB,SAMIH,CAPD;AAAA,GAL6C,CAAtB;AAAA,CAAvB;AAeP,OAAO,IAAMI,OAAO,GAAG,SAAVA,OAAU,QAAiC;AAAA,MAA/BC,MAA+B,SAA/BA,MAA+B;;AACpD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAD,IAA0B,CAACA,MAAM,CAACG,MAAtC,EAA8C;AAC1C,WAAO,IAAP;AACH;;AAED,SACI,oBAAC,OAAD,QACKH,MADL,aACKA,MADL,uBACKA,MAAM,CAAET,GAAR,CAAY,UAACa,KAAD,EAAaC,KAAb,EAA+B;AACxC,QAAMC,OAAO,aAAMF,KAAN,aAAMA,KAAN,uBAAMA,KAAK,CAAEG,IAAb,cAAqBF,KAArB,CAAb;;AACA,YAAQD,KAAR,aAAQA,KAAR,uBAAQA,KAAK,CAAEG,IAAf;AACI,WAAK,WAAL;AACI,eACI,oBAAC,IAAD,QACI,oBAAC,GAAD,QACI,oBAAC,MAAD;AAAQ,UAAA,MAAM,EAAE,CAAhB;AAAmB,UAAA,OAAO,EAAE;AAA5B,UADJ,EAEI,oBAAC,IAAD;AAAM,UAAA,OAAO,EAAE;AAAf,WACI,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC;AAAb,UADJ,EAEI,oBAAC,SAAD;AAAW,UAAA,GAAG,EAAED,OAAhB;AAAyB,UAAA,OAAO,EAAElB,cAAc,CAACgB,KAAD,CAAhD;AAAyD,UAAA,OAAO,MAAhE;AAAiE,UAAA,gBAAgB;AAAjF,UAFJ,CAFJ,CADJ,CADJ;;AAWJ;AACI,eAAO,IAAP;AAdR;AAgBH,GAlBA,CADL,CADJ;AAuBH,CA5BM","sourcesContent":["import React from 'react';\nimport {\n  Cell,\n  Grid,\n  Offset,\n  Row,\n  Section,\n  Spacer,\n  Accordion,\n} from '@excelwithbusiness/webmobile-sc-components';\n\n\nexport const prepareEntries = ({pageComponents}) => pageComponents.entries\n  .map(({title, description}) => ({\n    title,\n    details: description,\n  }))\n  .map((e, i) =>\n    i === 0\n      ? {\n        ...e,\n        isOpenInitially: true,\n        noBorderTop: true,\n      }\n      : e\n  );\n\nexport const Content = ({slices}: { slices: any[] }) => {\n    if (!Array.isArray(slices) || !slices.length) {\n        return null;\n    }\n\n    return (\n        <Section>\n            {slices?.map((slice: any, index: number) => {\n                const keyProp = `${slice?.type}_${index}`;\n                switch (slice?.type) {\n                    case 'Accordion':\n                        return (\n                            <Grid>\n                                <Row>\n                                    <Offset colsXs={0} columns={1} />\n                                    <Cell columns={10}>\n                                        <Spacer size=\"md\" />\n                                        <Accordion key={keyProp} entries={prepareEntries(slice)} isLarge withIconsOnRight />\n                                    </Cell>\n                                </Row>\n                            </Grid>\n                        );\n                    default:\n                        return null;\n                }\n            })}\n        </Section>\n    )\n};\n"],"file":"Content.js"}